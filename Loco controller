local computer = require("computer")
local component = require("component")
Train = component.ir_remote_control
Input = ...

-- Initialize constants
RATE_OF_ACCELERATION        = 0
BRAKE_RATE                  = 0
MAX_ACCELERATION            = 0
MIN_ACCELERATION            = 0
THROTTLE_INCREMENT          = 0
BRAKE_INCREMENT             = 0
HORN_LENGTH                 = 0
DEFAULT_SPEED               = 0
STATION_ACCURACY            = 0
TARGET_SPEED                = 0
STOPPING_GRADIENT           = 0
STOPPING_ACCELERATION_GAIN  = 5
STOPPING_RESET_AREA_SIZE    = 12
PROP_TO_ACC_DIFF_GAIN       = 12
PROP_TO_SPEED_DIFF_GAIN     = 0.25
DEBUG_MODE                  = false
COMPUTER_LOOP_SPEED         = 0.1

-- Initialize variables
StartingSpeed               = 0
CurrentSpeed                = 0
PreviousSpeed               = StartingSpeed
Acceleration                = 0
CentrePoint                 = 0
TargetAcceleration          = 0
CurveInvert                 = 0
CurvePeak                   = 0
BrakeOutput                 = 0
ThrottleOutput              = 0
StoppingTriggerSpeed        = 0
StoppingDistance            = 0
PropToAccDiff               = 0
MultipliedBrakeOutput       = 0
Stopping                    = false
Station                     = 1
PreviousStation             = -1
StationsArray               = {}
SpeedLimits                 = {}
EnteredStoppingResetArea    = false
Reverser                    = 1
PastStation                 = false
PreviousStoppingDistance    = 0
BackingToStation            = false
NumberOfStations            = 0
Selected = 1
NumberOfOptions = 0
SelectionID = 0
CurrentPage = nil
WaitingForSelection = true
Coords = "na"
SelectedRoute = ""
Str1 = "69"
debug = ""
Reversing = false
StopTime = 0
DirectionFromStation = ""
NumberOfStops = 0


function SplitString(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        table.insert(t, str)
    end
    return t
end


function ReadLine(Filename)
    if FileExists(Filename) == false then
        print("DOES NOT EXIST")
        os.sleep(10)
    end
    File = io.open(Filename, "r")
    CurrentSection = nil
    for line in io.lines(Filename) do
        Str1 = line
        if Str1:sub(1,1) == "#" or Str1 == "" then
            -- Skip line --
        elseif Str1 == "CONSTANTS" then
            CurrentSection = Str1
        elseif Str1 == "SPEED LIMITS" then
            CurrentSection = Str1
        elseif Str1 == "STOPS" then
            CurrentSection = Str1
        elseif Str1 == "SIGNALS" then
            CurrentSection = Str1
        elseif Str1 == "SWITCHES" then
            CurrentSection = Str1
        else
            if CurrentSection == "CONSTANTS" then
                List                = SplitString(Str1)
                RATE_OF_ACCELERATION= tonumber(List[1])
                BRAKE_RATE          = tonumber(List[2])
                MAX_ACCELERATION    = tonumber(List[3])
                MIN_ACCELERATION    = tonumber(List[4])
                THROTTLE_INCREMENT  = tonumber(List[5])
                BRAKE_INCREMENT     = tonumber(List[6])
                HORN_LENGTH         = tonumber(List[7])
                DEFAULT_SPEED       = tonumber(List[8])
                STATION_ACCURACY    = tonumber(List[9])
                STOPPING_GRADIENT   = tonumber(List[10])
            elseif CurrentSection == "SPEED LIMITS" then
                List                = SplitString(Str1)
                table.insert(SpeedLimits, List)
            elseif CurrentSection == "STOPS" then
                List                = SplitString(Str1)
                table.insert(List, false)
                table.insert(StationsArray, List)

            elseif CurrentSection == "SIGNALS" then
                -- Placeholder --
            elseif CurrentSection == "SWITCHES" then
                -- Placeholder --
            else
                print("ERROR CODE #02")
            end
        end
    end
    File:close()
    NumberOfStations = 0
    for _, Item in ipairs(StationsArray) do
        NumberOfStations = NumberOfStations + 1
    end
end


function Stopped() 
    PastStation = false
    BackingToStation = false
    Stopping = false
    Reverser = tonumber(StationsArray[Station][4])
    Train.setReverser(Reverser)
    for _, Item in ipairs(StationsArray) do Item[5] = false end
    StationsArray[Station][5] = true
    os.sleep(tonumber(StationsArray[Station][3]))
    Station = Station + 1
    if Station > NumberOfStations then Station = 1 end
    File = io.open("AutoTrain persistence", "w")
    File:write(Station)
    File:close()
end


function GetStoppingDistance()
    PreviousStoppingDistance = StoppingDistance
    if Station ~= PreviousStation then
        PreviousStation = Station
    end
    TargetX = tonumber(StationsArray[Station][1])
    TargetZ = tonumber(StationsArray[Station][2])
    DistanceX = TargetX - CurrentX
    if DistanceX < 0 then DistanceX = DistanceX * -1 end
    DistanceZ = TargetZ - CurrentZ
    if DistanceZ < 0 then DistanceZ = DistanceZ * -1 end
    if DistanceX > DistanceZ then
        StoppingDistance = DistanceX
    else
        StoppingDistance = DistanceZ
    end
    return StoppingDistance
end


function GetStoppingTriggerSpeed()
    StoppingTriggerSpeed = STOPPING_GRADIENT * StoppingDistance
    if StoppingTriggerSpeed < 0 then StoppingTriggerSpeed = StoppingTriggerSpeed * -1 end
    if StoppingTriggerSpeed < 0.5 then StoppingTriggerSpeed = 0.5 end   -- Trying minimum StoppingTriggerSpeed 
    if NewCloseToTargetCheck() then
        StoppingTriggerSpeed = 0
    end
end


function GetStoppingAcceleration()
    if CurrentSpeed > StoppingTriggerSpeed then 
        if StoppingDistance ~= 0 then
            if StoppingDistance < 0 then
                TargetAcceleration = ((CurrentSpeed/(StoppingDistance*-1))*-1) * STOPPING_ACCELERATION_GAIN
            else
                TargetAcceleration = ((CurrentSpeed/StoppingDistance)*-1) * STOPPING_ACCELERATION_GAIN
            end
        else
            TargetAcceleration = 0.5
        end
    else
        if CurrentSpeed == 0 then
            TargetAcceleration = 0.5
        end
    end
end


function MatchStoppingAcceleration() 
    BrakeOutput = component.ir_remote_control.info().brake
    PropToAccDiff = (Acceleration - TargetAcceleration) * PROP_TO_ACC_DIFF_GAIN
    if PropToAccDiff < 0 then PropToAccDiff = PropToAccDiff * -1 end
    PropToSpeedDiff = (CurrentSpeed/50) * PROP_TO_SPEED_DIFF_GAIN
    if PropToSpeedDiff < 0 then PropToSpeedDiff = PropToSpeedDiff * -1 end
    if Acceleration < TargetAcceleration then
        if BrakeOutput ~= 0 then
            if CurrentSpeed == 0 then
                BrakeOutput = 0
            else
                BrakeOutput = BrakeOutput - (BRAKE_INCREMENT * PropToAccDiff)
                MultipliedBrakeOutput = BrakeOutput * PropToSpeedDiff
                if BrakeOutput < 0 then BrakeOutput = 0 end
                if MultipliedBrakeOutput < 0 then MultipliedBrakeOutput = 0 end
            end
        else
            ThrottleOutput = ThrottleOutput + (THROTTLE_INCREMENT * PropToAccDiff)
            if ThrottleOutput > 1 then ThrottleOutput = 1 end
        end
    else
        if ThrottleOutput ~= 0 then
            ThrottleOutput = ThrottleOutput - (THROTTLE_INCREMENT * PropToAccDiff)
            if ThrottleOutput < 0 then ThrottleOutput = 0 end
        else
            BrakeOutput = BrakeOutput + (BRAKE_INCREMENT * PropToAccDiff)
            MultipliedBrakeOutput = BrakeOutput * PropToSpeedDiff
            if BrakeOutput > 1 then BrakeOutput = 1 end
            if MultipliedBrakeOutput > 1 then MultipliedBrakeOutput = 1 end 
        end
    end
    component.ir_remote_control.setThrottle(ThrottleOutput)
    component.ir_remote_control.setTrainBrake(MultipliedBrakeOutput)
end


function NewCloseToTargetCheck() 
    TargetX = tonumber(StationsArray[Station][1])
    TargetZ = tonumber(StationsArray[Station][2])
    if  CurrentX < (TargetX + STATION_ACCURACY) and 
        CurrentX > (TargetX - STATION_ACCURACY) and
        CurrentZ < (TargetZ + STATION_ACCURACY) and
        CurrentZ > (TargetZ - STATION_ACCURACY) then
        return true
    end
end


function NewAtStationCheck()
    if CurrentZ < TargetZ + STATION_ACCURACY and CurrentZ > TargetZ - STATION_ACCURACY and CurrentX < TargetX + STATION_ACCURACY and CurrentX > TargetX - STATION_ACCURACY then
        return true
    end
end


function NewStoppingTrain()
    if StoppingDistance < 50 or PastStation == true then
        if StoppingDistance > PreviousStoppingDistance or PastStation == true then
            PastStation = true
            if CurrentSpeed ~= 0 then
                component.ir_remote_control.setThrottle(0)
                component.ir_remote_control.setTrainBrake(1)
            else
                Reverser = Reverser * -1
                Train.setReverser(Reverser)
                PastStation = false
            end
        else
            if CurrentSpeed < 0.1 and CurrentSpeed > -0.1 and NewAtStationCheck() then
                Stopped()
            else
                if NewAtStationCheck() then
                    component.ir_remote_control.setThrottle(0)
                    component.ir_remote_control.setTrainBrake(1)
                else
                    MatchStoppingAcceleration()
                end
            end
        end
    else
        if CurrentSpeed < 0.1 and CurrentSpeed > 0.1 and NewCloseToTargetCheck() then
            Stopped()
        else
            MatchStoppingAcceleration()
        end
    end
end


function ChangeSpeedLimitCheck()
    SpeedSignMargin = CurrentSpeed/10
    for i, SpeedSign in ipairs(SpeedLimits) do
        if CurrentX < (SpeedSign[1]+SpeedSignMargin) and CurrentX > (SpeedSign[1]-SpeedSignMargin) and CurrentZ < (SpeedSign[2]+SpeedSignMargin) and CurrentZ > (SpeedSign[2]-SpeedSignMargin) then
            TARGET_SPEED = tonumber(SpeedSign[3])
        end
    end
end


function GetTargetAcceleration()
    CentrePoint = ((TARGET_SPEED-StartingSpeed)/2)+StartingSpeed
    if StartingSpeed > TARGET_SPEED then
        CurveInvert = -1
        if CurrentSpeed < CentrePoint then CurvePeak = TARGET_SPEED
        else CurvePeak = StartingSpeed end 
    else
        CurveInvert = 1
        if CurrentSpeed < CentrePoint then CurvePeak = StartingSpeed
        else CurvePeak = TARGET_SPEED end
    end
    TargetAcceleration = (RATE_OF_ACCELERATION * (CurrentSpeed - CurvePeak)^2)*CurveInvert
    if CurveInvert == 1 then
        if CurrentSpeed < CentrePoint then            
            if TargetAcceleration < MIN_ACCELERATION then TargetAcceleration = MIN_ACCELERATION end
        end
    else
        if CurrentSpeed > CentrePoint then     
            if TargetAcceleration > (MIN_ACCELERATION*-1) then TargetAcceleration = (MIN_ACCELERATION*-1) end
        end
    end
    if CurveInvert == 1 then
        if TargetAcceleration > MAX_ACCELERATION then TargetAcceleration = MAX_ACCELERATION end
    else
        if TargetAcceleration < (MAX_ACCELERATION*-1) then TargetAcceleration = (MAX_ACCELERATION*-1) end
    end
    if CurveInvert == 1 then
        if CurrentSpeed > TARGET_SPEED then
            TargetAcceleration = TargetAcceleration * -1
        end
    else
        if CurrentSpeed < TARGET_SPEED then
            TargetAcceleration = TargetAcceleration * -1
        end
    end
end


function ReachSpeed()
    BrakeOutput = component.ir_remote_control.info().brake
    ThrottleOutput = component.ir_remote_control.info().throttle
    GetTargetAcceleration()
    OverspeedReactivity = 4
    if Acceleration < TargetAcceleration then
        if BrakeOutput ~= 0 then
            BrakeOutput = BrakeOutput - BRAKE_INCREMENT
            if BrakeOutput < 0 then BrakeOutput = 0 end
        else
            print("ThrottleOutput("..ThrottleOutput..") = ThrottleOutput("..ThrottleOutput..") + THROTTLE_INCREMENT("..THROTTLE_INCREMENT..") = "..(ThrottleOutput+THROTTLE_INCREMENT))
            ThrottleOutput = ThrottleOutput + THROTTLE_INCREMENT
            if ThrottleOutput > 1 then ThrottleOutput = 1 end
        end
    else
        if ThrottleOutput ~= 0 then
            if (CurrentSpeed > (TARGET_SPEED+OverspeedReactivity)) then
                ThrottleOutput = 0
            else
                ThrottleOutput = ThrottleOutput - THROTTLE_INCREMENT
                if ThrottleOutput < 0 then ThrottleOutput = 0 end
            end
        else
            BrakeOutput = BrakeOutput + BRAKE_INCREMENT
            if BrakeOutput > 1 then BrakeOutput = 1 end
        end
    end
    component.ir_remote_control.setThrottle(ThrottleOutput)
    component.ir_remote_control.setTrainBrake(BrakeOutput)
end


function GetAcceleration()
    Acceleration = CurrentSpeed - PreviousSpeed
    PreviousSpeed = CurrentSpeed
    return Acceleration
end


function FileExists(Input)
    local f=io.open(Input,"r")
    if f~=nil then 
        io.close(f) 
        return true
    else 
        return false
    end
end


function Debug()
    DebugSpeed = tonumber(string.format("%.2f", CurrentSpeed))
    DebugAcceleration = tonumber(string.format("%.2f", Acceleration))
    DebugTargetAcceleration = tonumber(string.format("%.2f", TargetAcceleration))
    DebugDistanceToNextStop = StoppingDistance
    DebugNextStop = Station
    DebugCoords = CurrentX.." "..CurrentZ
    DebugThrottle = tonumber(string.format("%.4f", component.ir_remote_control.info().throttle))
    DebugBrake = tonumber(string.format("%.2f", component.ir_remote_control.info().brake))
    DebugReverser = Reverser
    DebugPreviousStoppingDistance = PreviousStoppingDistance
    DebugStoppingTriggerSpeed = StoppingTriggerSpeed
    DebugPastStation = tostring(PastStation)
    DebugBackingToStation = tostring(BackingToStation)
    os.execute("cls")
    print("Speed:                   "..DebugSpeed)
    print("StoppingTriggerSpeed:    "..DebugStoppingTriggerSpeed)
    print("Acceleration:            "..DebugAcceleration)
    print("Target Acceleration:     "..DebugTargetAcceleration)
    print("Coords:                  "..DebugCoords)
    print("Distance to next stop:   "..DebugDistanceToNextStop)
    print("Next stop:               "..DebugNextStop)
    -- print("PreviousStoppingDistance:"..DebugPreviousStoppingDistance)
    print("Throttle:                "..DebugThrottle)
    print("Brake:                   "..DebugBrake)
    print("Reverser:                "..DebugReverser)
    print("PastStation:             "..DebugPastStation)
    print("Speed limit:             "..TARGET_SPEED)
    -- print("BackingToStation:        "..DebugBackingToStation)
end


function RunLine()
    ReadLine(Filename)
    TARGET_SPEED = DEFAULT_SPEED
    Reverser = component.ir_remote_control.info().reverser
    File = io.open("AutoTrain persistence", "r")
    Station = tonumber(File:read("a"))
    File:close()
    while true do
        debug = ""
        CurrentSpeed = component.ir_remote_control.info().speed
        if Reverser == -1 then CurrentSpeed = CurrentSpeed * -1 end
        Acceleration = GetAcceleration()
        ThrottleOutput = component.ir_remote_control.info().throttle
        print("ThrottleOutput = "..component.ir_remote_control.info().throttle)
        CurrentX, CurrentY, CurrentZ = component.ir_remote_control.getPos()
        TargetX = tonumber(StationsArray[Station][1])
        TargetZ = tonumber(StationsArray[Station][2])
        GetStoppingDistance()
        GetStoppingTriggerSpeed()
        GetStoppingAcceleration()
        if CurrentSpeed > StoppingTriggerSpeed then
            Stopping = true
            NewStoppingTrain()
        else
            if NewAtStationCheck() then
                NewStoppingTrain()
            elseif PastStation and CurrentSpeed == 0 then
                NewStoppingTrain()
            else
                Stopping = false
                ReachSpeed()
            end
        end
        if TARGET_SPEED ~= PreviousTargetSpeed then
            StartingSpeed = CurrentSpeed
        end
        PreviousTargetSpeed = TARGET_SPEED
        Debug()
        os.sleep(COMPUTER_LOOP_SPEED)
    end
end


function GetRoutes(PageID, SelectionID)
    SelectionPages[PageID][3] = {}
    File = io.open("AutoTrain_Data", "r")
    CurrentSection = nil
    for line in io.lines("AutoTrain_Data") do
        Str1 = line
        if Str1:sub(1,1) == "#" or Str1 == "" then
            -- Skip line --
        elseif Str1 == "ROUTES" or Str1 == "PERSISTENCE" then
            CurrentSection = Str1
        else
            if CurrentSection == "ROUTES" then
                table.insert(SelectionPages[PageID][3], {Str1, SelectionID})
            end
        end
    end
    table.insert(SelectionPages[PageID][3], {"Back", 0})
end


function AddRouteInfoToFile()
    Str1 = ""
    File = io.open(SelectedRoute, "r")
    for line in io.lines(SelectedRoute) do
        LineString = line
        if LineString == "SPEED LIMITS" then
            Str1 = Str1..(string.format("%.1f", CurrentX)).." "..(string.format("%.0f", CurrentZ)).." "..StopTime.." "..DirectionFromStation.."\n"
        end
        Str1 = Str1..LineString.."\n"
    end
    File:close()
    File = io.open("Route_Backup", "w")
    File:write(Str1)
    File:close()
    File = io.open(SelectedRoute, "w")
    File:write(Str1)
    File:close()
end


function SetDefaultSpeed(DefaultSpeed)
    Str = ""
    File = io.open(SelectedRoute, "r")
    FoundSection = false
    for line in io.lines(SelectedRoute) do
        if FoundSection then
            if line[0] ~= '#' then
                -- take this line, split it up, set the 8th number to DefaultSpeed, save 
                RouteConstantsArray = SplitString(line)
                for i = 1, 7, 1 do
                    Str = Str.." "..RouteConstantsArray[i]
                end
                Str = Str.." "..DefaultSpeed
                for i = 9, 10, 1 do
                    Str = Str.." "..RouteConstantsArray[i]
                end
                Str = Str.."\n"
                FoundSection = false
            end
        else
            Str = Str..line.."\n"
            if line == "CONSTANTS" then
                FoundSection = true
            end
        end
    end
    File:close()
    File = io.open("Route_Backup", "w")
    File:write(Str)
    File:close()
    File = io.open(SelectedRoute, "w")
    File:write(Str)
    File:close()
end


SelectionPages = {
    {"#01 Main_menu",       "Welcome\n", {{"Start route", 1}, {"Create route", 7}, {"Edit route (WIP)", 1}, {"Remove route", 4}, {"Info/Help (WIP)", 1}, {"Quit", 6} }, "\nUse the arrow keys and Enter to make a selection"},
    {"#02 Routes list",     "Select a route to run:", {{"Back", 0}}, ""},
    {"#03 Add_route_data",  "Route creation", { {"Add a stop", 13}, {"Add a speed change (WIP)", 9}, {"Settings (WIP)", 1}, {"Set default speed", 15}, {"Done", 0} }, ""},
    {"#04 Adding stop", "", { {"Use current location of train", 14}, {"Enter coordinates manually (WIP)", 8}, {"Back", 0} }, ""},
    {"#05 Routes list to delete", "Select a route to remove from the list", {{"Back", 0}}, "The file will still be saved on the computer"},
    {"#06 Add a speed",  "", { {"Use current location of train", 16}, {"Enter coordinates manually (WIP)", 17}, {"Back", 0} }, ""},
    {"#07 Adding a speed", "", { {"Use current location of train", 18}, {"Enter coordinates manually (WIP)", 19}, {"Back", 0} }, ""},
    {"#08 Reversing", "Should the train reverse when leaving this station?", { {"Forwards", 20}, {"Reverse", 21} }, ""},
    {"#09 Where to start",  "Which station would you like to start with? ", { {"Back", 0} }, ""},
    {"#10", "Set starting reverser", { {"Forward", 10}, {"Reverse", 10} }, "Reverser is currently set to _"},
    {"Page_ID",         "HEADER", { {"OPTION", SelectionID} }, "FOOTER"},
    {"Page_ID",         "HEADER", { {"OPTION", SelectionID} }, "FOOTER"}
}


StringPages = {
    {"Enter a NAME for the route: ", 7},
    {"Enter an X and Z coordinate: ", 12}
}


function UI_Action(SelectionID)
    if     SelectionID == 0 then
        -- GO TO MAIN MENU 
        CurrentPage = SelectionPages[1]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()
    elseif SelectionID == 1 then
        -- Choose a route to start 
        GetRoutes(2,2)
        CurrentPage = SelectionPages[2]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()
    elseif SelectionID == 2 then
        -- Get route name 
        Filename = SelectionPages[2][3][Selected][1]
        
        -- Get NumberOfStations 
        File = io.open(Filename, "r")
        CurrentSection = nil
        NumberOfStations = 0
        for line in io.lines(Filename) do
            Str1 = line
            if Str1:sub(1,1) == "#" or Str1 == "" then
                -- Skip line --
            elseif (Str1 == "STOPS") or (Str1 == "SPEED LIMITS") then
                CurrentSection = Str1
            elseif CurrentSection == "STOPS" then
                NumberOfStations = NumberOfStations + 1
            end
        end
        File:close()
        if FileExists("AutoTrain persistence") then
            File = io.open("AutoTrain persistence", "r")
            NextStop = tonumber(File:read("a"))
            File:close()
        else
            NextStop = 0
        end
        SelectionPages[9][3] = {}
        for i = 1, NumberOfStations, 1 do
            if i == NextStop then
                table.insert(SelectionPages[9][3], {i.." (Previously the next stop)",5})
            else
                table.insert(SelectionPages[9][3], {i,5})
            end
        end
        CurrentPage = SelectionPages[9]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()
    elseif SelectionID == 3 then
        CurrentPage = SelectionPages[4]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()
    elseif SelectionID == 4 then
        GetRoutes(5,11)
        CurrentPage = SelectionPages[5]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()
    elseif SelectionID == 5 then
        -- Create persistence file with selected option as current stop 
        File = io.open("AutoTrain persistence", "w")
        File:write(Selected)
        File:close()

        Reverser = component.ir_remote_control.info().reverser
        if Reverser == 1 then
            SelectionPages[10][4] = "Reverser is currently set to forward"
        elseif Reverser == -1 then
            SelectionPages[10][4] = "Reverser is currently set to reverse"
        else
            SelectionPages[10][4] = "Reverser is currently set to "..Reverser
        end

         -- Open page 
         CurrentPage = SelectionPages[10]
         WaitingForSelection = true
         Selected = 1
         SelectionUI()

    elseif SelectionID == 6 then
        -- Quit
    elseif SelectionID == 7 then
        -- Save new route name 
        print("Enter a name for the route: ")
        Input = io.read()
        while FileExists(Input) or Input == "" do
            os.execute("cls")
            if Input ~= "" then
                print("Error: A file already exists with that name")
            end 
            print("Enter a name for the route: ")
            Input = io.read()
        end

        SelectedRoute = Input
        File = io.open(SelectedRoute, "w")
        File:write("CONSTANTS\n0.015 0.25 200 0.5 0.025 0.1 1 100 1 0.2\nSTOPS\nSPEED LIMITS\nSIGNALS\nSWITCHES")
        File:close()

        -- Add route name to data file 
        local AutoTrain_Data_Text = ""
        File = io.open("AutoTrain_Data", "r")
        for line in io.lines("AutoTrain_Data") do
            AutoTrain_Data_Text = AutoTrain_Data_Text.."\n"..line
            if line == "ROUTES" then
                AutoTrain_Data_Text = "\n"..AutoTrain_Data_Text.."\n"..Input
            end
        end
        File:close()

        File = io.open("AutoTrain_Data_Backup", "w")
        File:write(AutoTrain_Data_Text)
        File:close()

        File = io.open("AutoTrain_Data", "w")
        File:write(AutoTrain_Data_Text)
        File:close()

        CurrentPage = SelectionPages[3]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()
    elseif SelectionID == 8 then
        -- Add stop Z and Z manually 
        CurrentPage = StringPages[2]
        StringUI()

    elseif SelectionID == 9 then
        -- Add a speed
        CurrentPage = SelectionPages[6]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 10 then
        -- Run line 
        if Selected == 2 then
            Train.setReverser(-1)
            Reverser = -1
        else
            Train.setReverser(1)
            Reverser = 1
        end
        RunLine()

    elseif SelectionID == 11 then
        -- Delete Route 
        Filename = SelectionPages[5][3][Selected][1]
        os.remove(Filename)

        -- Remove route name from data file 
        local AutoTrain_Data_Text = ""
        File = io.open("AutoTrain_Data", "r")
        for line in io.lines("AutoTrain_Data") do
            if line ~= Filename then
                AutoTrain_Data_Text = AutoTrain_Data_Text.."\n"..line
            end
        end
        File:close()

        File = io.open("AutoTrain_Data_Backup", "w")
        File:write(AutoTrain_Data_Text)
        File:close()

        File = io.open("AutoTrain_Data", "w")
        File:write(AutoTrain_Data_Text)
        File:close()
        
        CurrentPage = SelectionPages[1]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 12 then
        -- Save X and Z 
        CurrentPage = SelectionPages

    elseif SelectionID == 13 then
        -- Add a stop 
        CurrentPage = SelectionPages[4]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 14 then
        -- Get stop X and Z from current location 
        if component.ir_remote_control.getPos() == nil then
            print("No coordinates found")
            os.sleep(2)
        else
            CurrentX, CurrentY, CurrentZ = component.ir_remote_control.getPos()

            -- Get stop time 
            print("How many seconds should the train stop for: ")
            Input = io.read()

            Input = tonumber(Input)
            while type(Input) ~= "number" do
                os.execute("cls")
                print("Please enter a number")
                print("How many seconds should the train stop for: ")
                Input = io.read()
                Input = tonumber(Input)
            end
            StopTime = Input
        end
        CurrentPage = SelectionPages[8]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 15 then
        -- Get defualt speed from user 
        print("What should the default speed be?\n")
        Input = io.read()
        Input = tonumber(Input)
        while type(Input) ~= "number" do
            os.execute("cls")
            print("Please enter a number")
            print("What should the default speed be?\n")
            Input = io.read()
            Input = tonumber(Input)
        end
        SetDefaultSpeed(Input)

        CurrentPage = SelectionPages[3]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 16 then
        -- Get stop X and Z from current location 
        if component.ir_remote_control.getPos() == nil then
            print("No coordinates found")
            os.sleep(2)
        else
            CurrentX, CurrentY, CurrentZ = component.ir_remote_control.getPos()
        end
        CurrentPage = SelectionPages[3]
        WaitingForSelection = true
        Selected = 1
        StringUI()

    elseif SelectionID == 17 then

    elseif SelectionID == 18 then
        -- Get stop X and Z from current location 
        if component.ir_remote_control.getPos() == nil then
            print("No coordinates found")
            os.sleep(2)
        else
            CurrentX, CurrentY, CurrentZ = component.ir_remote_control.getPos()
        end

        -- Get speed limit  
        print("New speed limit at this location: ")
        Input = io.read()
        Input = tonumber(Input)
        while type(Input) ~= "number" do
            os.execute("cls")
            print("Please enter a number")
            print("New speed limit at this location: ")
            Input = io.read()
            Input = tonumber(Input)
        end

        -- Write coordinates and speed limit to route file 
        Str1 = ""
        File = io.open(SelectedRoute, "r")
        for line in io.lines(SelectedRoute) do
            LineString = line

            if LineString == "SIGNALS" then
                Str1 = Str1..(string.format("%.1f", CurrentX)).." "..(string.format("%.0f", CurrentZ)).." "..Input.."\n"
            end
            Str1 = Str1..LineString.."\n"
        end

        File:close()
        File = io.open("Route_Backup", "w")
        File:write(Str1)
        File:close()
        File = io.open(SelectedRoute, "w")
        File:write(Str1)
        File:close()


        CurrentPage = SelectionPages[3]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 19 then

    elseif SelectionID == 20 then
        -- Forwards from station  
        DirectionFromStation = "1"
        AddRouteInfoToFile()
        CurrentPage = SelectionPages[3]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 21 then
        -- Reverse from station 
        DirectionFromStation = "-1"
        AddRouteInfoToFile()
        CurrentPage = SelectionPages[3]
        WaitingForSelection = true
        Selected = 1
        SelectionUI()

    elseif SelectionID == 22 then

    else
        -- SelectionID out of bounds 
    end
end


function DrawPage(PageContent)
    NumberOfOptions = 0
    os.execute("cls")
    print(PageContent[2])
    for i, value in ipairs(PageContent[3]) do
        if i == Selected then
            print("-"..value[1])
        else
            print(" "..value[1])
        end
        NumberOfOptions = NumberOfOptions + 1
    end
    print(PageContent[4])
end

function SelectionUI()
    while WaitingForSelection do
        DrawPage(CurrentPage)
        event,_,letterAsciiCode,letterCode,_ = computer.pullSignal()
        if (event == "key_down" and letterCode == 208) then -- Down 
            Selected = Selected + 1
            if Selected > NumberOfOptions then Selected = 1 end
            DrawPage(CurrentPage)
        elseif (event == "key_down" and letterCode == 200) then -- Up 
            Selected = Selected - 1
            if Selected < 1 then Selected = NumberOfOptions end
            DrawPage(CurrentPage)
        elseif (event == "key_down" and letterCode == 28) then -- Enter 
            SelectionID = CurrentPage[3][Selected][2]
            os.execute("cls")
            UI_Action(SelectionID)
            WaitingForSelection = false
        end
    end
end

function StringUI()
    print(CurrentPage[1])
    Input = io.read()
    UI_Action(CurrentPage[2])
end

--==*==--

-- If data file doesn't exist, create one 
if FileExists("AutoTrain_Data") == false then
    File = io.open("AutoTrain_Data", "w")
    File:write("ROUTES\n\nPERSISTENCE\n")
    File:close()
end

CurrentPage = SelectionPages[1]
SelectionUI()
